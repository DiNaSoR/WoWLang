name: Create Add-On Releases
on:
  push:
    tags:
      - 'v*.*.*'
env:
  NODE_VERSION: '20'
permissions:
  contents: write
  packages: write
  actions: read
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    - name: Build and Release Add-Ons
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        set -e
        # Get the version from the tag
        VERSION=${GITHUB_REF#refs/tags/v}
        # Get the current date in the format YYYY-MM-DD
        DATE=$(date +'%Y-%m-%d')
        for addon in WoWAR WoWPL WoWTR; do
          echo "Building $addon..."
          mkdir -p builds/$addon
          if [ -d "$addon" ]; then
            cp -r $addon/* builds/$addon/
          else
            echo "Warning: $addon directory not found, skipping..."
            continue
          fi
          
          if [ -d "common" ]; then
            cp -r common/* builds/$addon/
          else
            echo "Warning: common directory not found, skipping..."
          fi
          
          # Create the zip file with the new naming convention
          FILENAME="${addon}_v${VERSION}_${DATE}.zip"
          (cd builds/$addon && zip -r ../$FILENAME .)
          
          echo "Checking for existing release..."
          release_id=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ github.ref_name }}" | \
            jq -r '.id // empty')
          
          if [ -n "$release_id" ]; then
            echo "Updating existing release for $addon..."
            release_url="https://api.github.com/repos/${{ github.repository }}/releases/$release_id"
            curl -s -X PATCH \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              "$release_url" \
              -d '{
                "name": "Release ${{ github.ref_name }}",
                "body": "Release notes for ${{ github.ref_name }}\n\nUpdated: '$addon'"
              }'
          else
            echo "Creating new release for $addon..."
            release_response=$(curl -s -X POST \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/repos/${{ github.repository }}/releases \
              -d '{
                "tag_name": "${{ github.ref_name }}",
                "name": "Release ${{ github.ref_name }}",
                "body": "Release notes for ${{ github.ref_name }}\n\nIncluded: '$addon'",
                "draft": false,
                "prerelease": false
              }')
            
            echo "Release creation response: $release_response"
            release_url=$(echo "$release_response" | jq -r .upload_url | sed 's/{?name,label}//g')
            
            if [ -z "$release_url" ] || [ "$release_url" == "null" ]; then
              echo "Error: Failed to create release. API response: $release_response"
              exit 1
            fi
          fi
          
          echo "Uploading $FILENAME to release..."
          upload_url="${release_url/api.github.com\/repos/uploads.github.com\/repos}/assets"
          upload_response=$(curl -s -X POST \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Content-Type: application/zip" \
            -H "Accept: application/vnd.github.v3+json" \
            --data-binary @builds/$FILENAME \
            "${upload_url}?name=$FILENAME")
          
          echo "Upload response: $upload_response"
          
          if ! echo "$upload_response" | jq -e .id > /dev/null; then
            echo "Error: Failed to upload asset. API response: $upload_response"
            exit 1
          fi
          
          echo "Successfully released and uploaded $FILENAME"
        done